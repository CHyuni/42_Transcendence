"""
Django settings for test_site project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import environ

env = environ.Env()
environ.Env.read_env()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')
ENCRYPTION_KEY = env('DJANGO_ENCRYPTION_KEY')
CONTRACT_ADDRESS = env('DJANGO_CONTRACT_ADDRESS')
WEB3_PROVIDER_URL = env('DJANGO_WEB3_PROVIDER_URL')
ADMIN_PRIVATE_KEY = env('DJANGO_ADMIN_PRIVATE_KEY') 
GOOGLE_CLIENT_ID = env('REACT_APP_GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = env('REACT_APP_GOOGLE_CLIENT_SECRET')
GOOGLE_REDIRECT_URL = env('REACT_APP_GOOGLE_REDIRECT_URL')

SERVER_URL = f'http://{env.str("SERVER_IP")}'
SERVER_URL_WITH_DJANGO_PORT = f'{SERVER_URL}:8080'
REDIRECT_URL = env('REDIRECT_URL')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [env.str("SERVER_IP"),
    'localhost',
    env.str("SERVER_IP") + '.nip.io',
    '127.0.0.1',    
    'django',  # 추가
    'django:8000',]  # 추가

CSRF_TRUSTED_ORIGINS = [
    # SERVER_URL_WITH_DJANGO_PORT,
    f'https://{env.str("SERVER_IP")}:8081',
]

# Application definition

INSTALLED_APPS = [
    'api',
    'chat',
    'accounts',
    'game',
    'channel',
    'totp',
    'web3_app',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	'oauth2_provider',
    'rest_framework',
    'channels',
    'corsheaders',
    'rest_framework_simplejwt',
    'django_prometheus',
    'django_celery_results',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'test_site.middleware.JWTAuthMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware', 
]


CSP_DEFAULT_SRC = ("'self'",) # 모든 리소스 파일의 기본 정책

CSP_SCRIPT_SRC = (# 자바스크립트 정책, 허용한 도메인에서만 스크립트 로드 가능 
    "'self'",
    "https://cdn.jsdelivr.net", 
)
CSP_STYLE_SRC = (
    "'self'",
    "https://cdn.jsdelivr.net",  # Bootstrap 스타일 허용
)

# XSS 보호 설정 활성화, 응답헤더에 X-XSS-Protection: 1; mode=block을 추가
SECURE_BROWSER_XSS_FILTER = True

CORS_ALLOWED_ORIGINS = [
    f'{SERVER_URL}:3000',
]
CORS_ALLOW_CREDENTIALS = True 
# CSRF_COOKIE_SECURE = True  # HTTPS 사용시
# CSRF_COOKIE_HTTPONLY = True  # JavaScript에서 쿠키 접근 방지
# CORS_ALLOWED_METHODS = [
# ]

# CORS_ALLOWED_HEADERS = [
# ]

ROOT_URLCONF = 'test_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'test_site.wsgi.application'

ASGI_APPLICATION = 'test_site.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('redis', 6379)],
			"capacity": 1500,
			"expiry": 10,
        },
    },
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


CLIENT_ID = env('CLIENT_ID')
CLIENT_SECRET = env('CLIENT_SECRET')


DATABASES = {
    'default': {
        'ENGINE': 'django_prometheus.db.backends.postgresql',
        'NAME': env('POSTGRES_DB'),
        'USER':  env('POSTGRES_USER'),
        'PASSWORD':  env('POSTGRES_PASSWORD'),
        'HOST': 'postgres',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/nginx/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/staticfiles/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 600,  # 토큰 만료 시간 (초)
    'OAUTH2_VALIDATOR_CLASS': 'oauth2_provider.oauth2_validators.OAuth2Validator',
}

SESSION_COOKIE_HTTPONLY = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_AGE = 36000

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ]
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ]
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/home/django.log',
            'formatter': 'standard',
        },
    },
    'loggers': {
        '': {  # 루트 로거 설정
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django_prometheus': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}

# SECURE_SSL_REDIRECT = True  # HTTP를 HTTPS로 리다이렉트
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') # 프록시 서버의 원래 요청이 https였다는것을 알려주기 위함

CELERY_BROKER_URL = "redis://redis:6379/0"
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Seoul'
CELERY_RESULT_BACKEND = "django-db"

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/1',  # 데이터베이스 번호 변경 (0은 Celery가 사용 중)
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'